openapi: 3.1.0
info:
  title: Iger API
  version: 0.1.0
  description: API para gestión escolar (students, tasks, events, auth, payments)
servers:
  - url: https://unfepih103.execute-api.us-east-1.amazonaws.com/dev
    description: Dev
paths:
  # ===== AUTHENTICATION =====
  /auth/register:
    post:
      summary: Registrar nuevo usuario
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterRequest' }
      responses:
        '201':
          description: Usuario creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '400':
          description: Datos inválidos
  /auth/login:
    post:
      summary: Iniciar sesión
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '401':
          description: Credenciales inválidas
  /auth/refresh:
    post:
      summary: Refrescar token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefreshRequest' }
      responses:
        '200':
          description: Token refrescado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '401':
          description: Token inválido
  /auth/logout:
    post:
      summary: Cerrar sesión
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout exitoso

  # ===== PAYMENTS =====
  /payments/subscription:
    post:
      summary: Crear suscripción de pago
      tags: [Payments]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SubscriptionCreate' }
      responses:
        '201':
          description: Suscripción creada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Subscription' }
        '400':
          description: Datos inválidos
  /payments/subscription/{subscriptionId}:
    get:
      summary: Obtener suscripción
      tags: [Payments]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: subscriptionId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Subscription' }
    delete:
      summary: Cancelar suscripción
      tags: [Payments]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: subscriptionId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Suscripción cancelada
  /payments/invoices:
    get:
      summary: Listar facturas
      tags: [Payments]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: orgId
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
        - in: query
          name: nextToken
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  invoices:
                    type: array
                    items: { $ref: '#/components/schemas/Invoice' }
                  nextToken: { type: string, nullable: true }
  /payments/webhook:
    post:
      summary: Webhook para notificaciones de pago (Stripe/PayPal)
      tags: [Payments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Evento del proveedor de pagos
      responses:
        '200':
          description: Webhook procesado

  /students:
    get:
      summary: Listar estudiantes
      parameters:
        - in: query
          name: orgId
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
        - in: query
          name: nextToken
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  students:
                    type: array
                    items: { $ref: '#/components/schemas/Student' }
                  nextToken: { type: string, nullable: true }
                  limit: { type: integer }
    post:
      summary: Crear estudiante
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentCreate'
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Student' }
  /students/{studentId}:
    get:
      summary: Obtener estudiante
      parameters:
        - in: path
          name: studentId
          required: true
          schema: { type: string }
        - in: query
          name: orgId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  student: { $ref: '#/components/schemas/Student' }
    put:
      summary: Actualizar estudiante
      parameters:
        - in: path
          name: studentId
          required: true
          schema: { type: string }
        - in: query
          name: orgId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/StudentUpdate' }
      responses:
        '200': { description: OK }
    delete:
      summary: Eliminar estudiante
      parameters:
        - in: path
          name: studentId
          required: true
          schema: { type: string }
        - in: query
          name: orgId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /tasks:
    get:
      summary: Listar tareas
      parameters:
        - in: query
          name: classId
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
        - in: query
          name: nextToken
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items: { $ref: '#/components/schemas/Task' }
                  nextToken: { type: string, nullable: true }
                  limit: { type: integer }
    post:
      summary: Crear tarea
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TaskCreate' }
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }

  /classes/{classId}/tasks/{taskId}:
    get:
      summary: Obtener tarea
      parameters:
        - in: path
          name: classId
          required: true
          schema: { type: string }
        - in: path
          name: taskId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  task: { $ref: '#/components/schemas/Task' }
    put:
      summary: Actualizar tarea
      parameters:
        - in: path
          name: classId
          required: true
          schema: { type: string }
        - in: path
          name: taskId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TaskUpdate' }
      responses:
        '200': { description: OK }
    delete:
      summary: Eliminar tarea
      parameters:
        - in: path
          name: classId
          required: true
          schema: { type: string }
        - in: path
          name: taskId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /events:
    get:
      summary: Listar eventos
      parameters:
        - in: query
          name: orgId
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
        - in: query
          name: nextToken
          schema: { type: string }
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items: { $ref: '#/components/schemas/Event' }
                  nextToken: { type: string, nullable: true }
                  limit: { type: integer }
    post:
      summary: Crear evento
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/EventCreate' }
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Event' }
  /events/{eventId}:
    get:
      summary: Obtener evento
      parameters:
        - in: path
          name: eventId
          required: true
          schema: { type: string }
        - in: query
          name: orgId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  event: { $ref: '#/components/schemas/Event' }
    put:
      summary: Actualizar evento
      parameters:
        - in: path
          name: eventId
          required: true
          schema: { type: string }
        - in: query
          name: orgId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/EventUpdate' }
      responses:
        '200': { description: OK }
    delete:
      summary: Eliminar evento
      parameters:
        - in: path
          name: eventId
          required: true
          schema: { type: string }
        - in: query
          name: orgId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

components:
  schemas:
    Student:
      type: object
      properties:
        id: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        birthDate: { type: string, format: date }
        grade: { type: string }
        parentIds:
          type: array
          items: { type: string }
        orgId: { type: string }
        createdAt: { type: integer }
        updatedAt: { type: integer }
    StudentCreate:
      type: object
      required: [orgId, firstName, lastName, birthDate, grade]
      properties:
        orgId: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        birthDate: { type: string, format: date }
        grade: { type: string }
        parentIds:
          type: array
          items: { type: string }
    StudentUpdate:
      type: object
      properties:
        firstName: { type: string }
        lastName: { type: string }
        birthDate: { type: string, format: date }
        grade: { type: string }
        parentIds:
          type: array
          items: { type: string }

    Task:
      type: object
      properties:
        id: { type: string }
        classId: { type: string }
        title: { type: string }
        description: { type: string }
        dueDate: { type: string, format: date }
        attachments:
          type: array
          items: { type: string }
        maxScore: { type: number }
        createdAt: { type: integer }
        updatedAt: { type: integer }
    TaskCreate:
      type: object
      required: [classId, title, description, dueDate]
      properties:
        classId: { type: string }
        title: { type: string }
        description: { type: string }
        dueDate: { type: string, format: date }
        attachments:
          type: array
          items: { type: string }
        maxScore: { type: number }
    TaskUpdate:
      type: object
      properties:
        title: { type: string }
        description: { type: string }
        dueDate: { type: string, format: date }
        attachments:
          type: array
          items: { type: string }
        maxScore: { type: number }

    Event:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        description: { type: string }
        startDate: { type: string, format: date-time }
        endDate: { type: string, format: date-time }
        type:
          type: string
          enum: [meeting, activity, holiday]
        attendees:
          type: array
          items: { type: string }
        location: { type: string }
        orgId: { type: string }
        createdAt: { type: integer }
        updatedAt: { type: integer }
    EventCreate:
      type: object
      required: [orgId, title, type]
      properties:
        orgId: { type: string }
        title: { type: string }
        description: { type: string }
        type:
          type: string
          enum: [meeting, activity, holiday]
        # Se acepta date o par startDate/endDate
        date: { type: string, format: date-time }
        startDate: { type: string, format: date-time }
        endDate: { type: string, format: date-time }
        attendees:
          type: array
          items: { type: string }
        location: { type: string }
    EventUpdate:
      type: object
      properties:
        title: { type: string }
        description: { type: string }
        type:
          type: string
          enum: [meeting, activity, holiday]
        startDate: { type: string, format: date-time }
        endDate: { type: string, format: date-time }
        location: { type: string }

    # ===== AUTH SCHEMAS =====
    RegisterRequest:
      type: object
      required: [email, password, firstName, lastName]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password, minLength: 8 }
        firstName: { type: string }
        lastName: { type: string }
        orgId: { type: string, description: 'Opcional: ID de organización si ya existe' }
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
    RefreshRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken: { type: string }
    AuthResponse:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
        idToken: { type: string }
        expiresIn: { type: integer }
        user:
          type: object
          properties:
            id: { type: string }
            email: { type: string }
            firstName: { type: string }
            lastName: { type: string }
            orgId: { type: string }

    # ===== PAYMENT SCHEMAS =====
    SubscriptionCreate:
      type: object
      required: [orgId, planId, paymentMethodId]
      properties:
        orgId: { type: string }
        planId:
          type: string
          enum: [basic, premium, enterprise]
          description: Plan de suscripción
        paymentMethodId: { type: string, description: 'ID del método de pago en Stripe/PayPal' }
        couponCode: { type: string, description: 'Código de descuento opcional' }
    Subscription:
      type: object
      properties:
        id: { type: string }
        orgId: { type: string }
        planId: { type: string, enum: [basic, premium, enterprise] }
        status:
          type: string
          enum: [active, cancelled, past_due, trialing]
        currentPeriodStart: { type: string, format: date-time }
        currentPeriodEnd: { type: string, format: date-time }
        cancelAtPeriodEnd: { type: boolean }
        createdAt: { type: integer }
        updatedAt: { type: integer }
    Invoice:
      type: object
      properties:
        id: { type: string }
        orgId: { type: string }
        subscriptionId: { type: string }
        amount: { type: number, description: 'Monto en centavos' }
        currency: { type: string, default: 'usd' }
        status:
          type: string
          enum: [draft, open, paid, void, uncollectible]
        invoiceDate: { type: string, format: date-time }
        dueDate: { type: string, format: date-time }
        paidAt: { type: string, format: date-time, nullable: true }
        pdfUrl: { type: string, format: uri, nullable: true }

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtenido de /auth/login

